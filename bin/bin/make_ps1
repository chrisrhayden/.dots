#┌─╼ (| git_branch) project_env (nvm version)
#└──▶
# shellcheck disable=2148

# defaults
###############################################################################
# can be empty
ENV=''
ENV_COLOR=''
GIT_STR=''
GIT_COLOR=''
NVM_PROMPT=''

# will always be the same
BEGIN='┌─╼ '
END='└──▶ '

# user settings
###############################################################################
if [[ -z $VENV_DIR_NAME ]]; then
    VENV_DIR_NAME="${HOME}/Venv"
fi

# shell defaults
if [[ $1 == 'zsh' ]]; then
    RED='%F{red}'
    BLUE='%F{blue}'
    GREEN='%F{green}'
    PURPLE='%F{magenta}'
    RESET_COLOR='%F{reset_color}'
    DIR_STR='%~ '
else
    RED='\\[\033[31m\\]'
    BLUE='\\[\033[34m\\]'
    GREEN='\\[\033[32m\\]'
    PURPLE='\\[\033[35m\\]'
    RESET_COLOR='\\[\033[0m\\]'
    DIR_STR='\w '
fi

# functions
###############################################################################
# check if there is a git dir somewhere above the current dir
scan_dirs() {
    shopt -s dotglob
    local target

    found=0
    target="$1"

    while [[ $target != / ]]; do
        for thing in "${target}"/*; do
            if [[ -d $thing ]] && [[ ${thing}/ == ${target}/.git/ ]]; then
                found=1
                break;
            fi
        done

        target="$(realpath "${target}/..")"
    done
    shopt -u dotglob

    if ((found == 1)); then
        return 0;
    else
        return 1;
    fi
}

# fill empty variables
###############################################################################

# TODO: this could be better
if scan_dirs "$PWD"; then
    # unsaved changes and uninitiated repos
    if [[ -n  $(git status --short) ]]; then
        GIT_STR='✗ '
        GIT_COLOR="$RED"
    else
        GIT_STR='✓ '
        GIT_COLOR="$GREEN"
    fi

    branch="$(git branch | grep '\*')"
    # remove the * and any space
    branch="${branch//[\*\ ]/}"
    # only show branch if its checked out
    if [[ -n $branch ]] && [[ $branch != 'master' ]]; then
        GIT_STR="(${GIT_STR}- ${branch}) "
    fi
fi

# there is an active venv
if [[ -n $VIRTUAL_ENV ]]; then
    ENV="${VIRTUAL_ENV##*/} "
    ENV_COLOR="$GREEN"

    # else if there is an env dir of the current project
elif [[ -d ${VENV_DIR_NAME}/${PWD##*/}_env ]]; then
    ENV="${PWD##*/}_env "
    ENV_COLOR="$RED"
fi

if [[ -n $NVM_VERSION ]]; then
    NVM_PROMPT="(nvm - $NVM_VERSION)"
fi

# lol, fuck
printf '%b%s%b%s%b%s%b%b%s%b%s\n%b%s%b' \
    "$BLUE" "$BEGIN" "$PURPLE" "$DIR_STR" \
    "$GIT_COLOR" "$GIT_STR" "$RESET_COLOR" \
    "$ENV_COLOR" "$ENV" "$RESET_COLOR" "$NVM_PROMPT" \
    "$BLUE" "$END" "$RESET_COLOR"

# vim: filetype=sh:
